var t = function() {
        return (t = Object.assign || function(t) {
            for (var e, i = 1, n = arguments.length; i < n; i++)
                for (var o in e = arguments[i]) Object.prototype.hasOwnProperty.call(e, o) && (t[o] = e[o]);
            return t
        }).apply(this, arguments)
    },
    e = function() {
        function e(t, e, i, n) {
            var o = this;
            this.iframe = null, this.iframeId = null, this.sessionId = "", this.$container = null, this.onMessage = function(t) {
                o.onSdkMessage(t)
            }, this.baseUrl = t, this.config = e, this.callbacks = i, this.options = n
        }
        return e.prototype.launch = function(t) {
            this.options.addViewportTag && this.addViewportTag(), this.iframe = this.createIframe(t), this.sessionId = "", this.iframeId = "id_" + Math.floor(1e8 * Math.random()), this.iframe && this.config ? (this.registerEventListener(), this.iframe.src = this.getIframeSrc()) : console.error("Idensic was not initialized since either provided element was not found in the DOM or invalid config")
        }, e.prototype.addViewportTag = function() {
            var t = document.getElementsByName("viewport");
            if (!t || 0 === t.length) {
                var e = document.createElement("meta");
                e.setAttribute("name", "viewport"), e.setAttribute("content", "width=device-width,user-scalable=yes"), document.head.appendChild(e)
            }
        }, e.prototype.createIframe = function(t) {
            var e = "string" == typeof t ? document.querySelector(t) : t;
            if (!e) return console.error("Provide a valid selector for the iframe container"), null;
            this.$container = e;
            var i = document.createElement("iframe");
            for (i.width = "100%", i.scrolling = "no", i.allow = "camera; microphone", i.setAttribute("frameborder", "0"); e.firstChild;) e.removeChild(e.firstChild);
            return e.appendChild(i), i
        }, e.prototype.getIframeSrc = function() {
            var t = this.baseUrl.indexOf("localhost") > -1 ? "" : "/idensic";
            return this.baseUrl + t + "/websdk.html" + ("?_=" + this.iframeId)
        }, e.prototype.registerEventListener = function() {
            window.addEventListener("message", this.onMessage)
        }, e.prototype.onSdkMessage = function(e) {
            var i;
            if (this.baseUrl === e.origin) {
                var n = e.data;
                if (n.method && ~n.method.indexOf("idCheck") && (!this.sessionId || this.sessionId === n.sessionId) && (null === (i = this.iframe) || void 0 === i ? void 0 : i.contentWindow)) {
                    "idCheck.onReady" == n.method && n.frameId === this.iframeId && (this.sessionId = n.sessionId, this.iframe.contentWindow.postMessage(t({
                        method: "idCheck.init"
                    }, this.config), "*")), "idCheck.onResize" == n.method && this.options.adaptIframeHeight && (this.iframe.style.height = n.height + "px");
                    var o = n.method;
                    delete n.method, delete n.frameId, delete n.sessionId, "idCheck.onError" === o && "invalid-token" === n.code ? this.callExpirationHandler() : "idCheck.onError" === o && "function" == typeof this.callbacks.onError ? this.callbacks.onError(n) : "function" == typeof this.callbacks.onMessage && this.callbacks.onMessage(o, n)
                }
            }
        }, e.prototype.callExpirationHandler = function() {
            var t = this,
                e = this.callbacks.expirationHandler;
            e.legacy ? e.handler((function(e) {
                return t.updateAccessToken(e)
            })) : e.handler().then((function(e) {
                return t.updateAccessToken(e)
            }), (function(e) {
                null != e || (e = "Failed to update access token"), e.message && (e = e.message), "string" != typeof e && (e = String(e)), t.updateAccessToken(null, e)
            }))
        }, e.prototype.updateAccessToken = function(t, e) {
            var i, n;
            null === (n = null === (i = this.iframe) || void 0 === i ? void 0 : i.contentWindow) || void 0 === n || n.postMessage({
                method: "idCheck.updateAccessToken",
                accessToken: t,
                error: e
            }, "*")
        }, e.prototype.destroy = function() {
            for (window.removeEventListener("message", this.onMessage); this.$container && this.$container.firstChild;) this.$container.removeChild(this.$container.firstChild);
            this.$container = null
        }, e
    }(),
    i = function() {
        function t(t, e) {
            if (this.baseUrl = "https://api.sumsub.com", this.config = null, this.eventHandlers = {}, this.anyEventHandler = null, this.options = {
                    adaptIframeHeight: !0,
                    addViewportTag: !0
                }, "string" != typeof t) throw new Error("Access token must be a string");
            if ("function" != typeof e) throw new Error("updateAccessToken callback is required");
            this.accessToken = t, this.updateAccessToken = e
        }
        return t.prototype.onTestEnv = function() {
            return this.baseUrl = "https://test-api.sumsub.com", this
        }, t.prototype.withBaseUrl = function(t) {
            return this.baseUrl = t, this
        }, t.prototype.withConf = function(t) {
            return this.config = t, this
        }, t.prototype.withOptions = function(t) {
            return t.hasOwnProperty("adaptIframeHeight") && (this.options.adaptIframeHeight = t.adaptIframeHeight), t.hasOwnProperty("addViewportTag") && (this.options.addViewportTag = t.addViewportTag), this
        }, t.prototype.on = function(t, e) {
            return this.eventHandlers[t] = e, this
        }, t.prototype.onMessage = function(t) {
            return this.anyEventHandler = t, this
        }, t.prototype.build = function() {
            var t, i, n, o, s, r, a, d = this;
            return new e(this.baseUrl, {
                accessToken: this.accessToken,
                lang: null === (t = this.config) || void 0 === t ? void 0 : t.lang,
                email: null === (i = this.config) || void 0 === i ? void 0 : i.email,
                phone: null === (n = this.config) || void 0 === n ? void 0 : n.phone,
                country: null === (o = this.config) || void 0 === o ? void 0 : o.country,
                uiConf: null === (s = this.config) || void 0 === s ? void 0 : s.uiConf,
                i18n: null === (r = this.config) || void 0 === r ? void 0 : r.i18n,
                documentsByCountries: null === (a = this.config) || void 0 === a ? void 0 : a.documentsByCountries
            }, {
                expirationHandler: {
                    legacy: !1,
                    handler: this.updateAccessToken
                },
                onMessage: function(t, e) {
                    var i;
                    d.eventHandlers[t] ? d.eventHandlers[t](e) : null === (i = d.anyEventHandler) || void 0 === i || i.call(d, t, e)
                }
            }, this.options)
        }, t
    }(),
    n = function() {
        function t(t, e) {
            this.debugEnabled = !1, this.options = {
                adaptIframeHeight: !0,
                addViewportTag: !0
            }, this.config = null, this.accessToken = null, this.expirationHandler = null, this.baseUrl = t, this.flowName = e
        }
        return t.prototype.withAccessToken = function(t, e) {
            if (this.accessToken = t, !e || "function" != typeof e) throw new Error('Invalid parameter, "expirationHandler" must be a function');
            return this.expirationHandler = e, this
        }, t.prototype.debug = function(t) {
            return this.debugEnabled = t, this
        }, t.prototype.withOptions = function(t) {
            return t.hasOwnProperty("adaptIframeHeight") && (this.options.adaptIframeHeight = t.adaptIframeHeight), t.hasOwnProperty("addViewportTag") && (this.options.addViewportTag = t.addViewportTag), this
        }, t.prototype.withConf = function(t) {
            return this.config = t, this
        }, t.prototype.build = function() {
            var t, i, n, o, s, r, a, d, h;
            if (!this.accessToken || !this.expirationHandler) throw new Error("Configure access token end the expiration handler before");
            return new e(this.baseUrl, {
                accessToken: this.accessToken,
                flowName: this.flowName,
                lang: null === (t = this.config) || void 0 === t ? void 0 : t.lang,
                email: null === (i = this.config) || void 0 === i ? void 0 : i.email,
                phone: null === (n = this.config) || void 0 === n ? void 0 : n.phone,
                country: null === (o = this.config) || void 0 === o ? void 0 : o.country,
                uiConf: null === (s = this.config) || void 0 === s ? void 0 : s.uiConf,
                i18n: null === (r = this.config) || void 0 === r ? void 0 : r.i18n,
                documentsByCountries: null === (a = this.config) || void 0 === a ? void 0 : a.documentsByCountries
            }, {
                expirationHandler: {
                    legacy: !0,
                    handler: this.expirationHandler
                },
                onMessage: null === (d = this.config) || void 0 === d ? void 0 : d.onMessage,
                onError: null === (h = this.config) || void 0 === h ? void 0 : h.onError
            }, {
                adaptIframeHeight: this.options.adaptIframeHeight,
                addViewportTag: this.options.addViewportTag,
                debug: this.debugEnabled
            })
        }, t
    }(),
    o = {
        Builder: function(t, e) {
            return new n(t, e)
        },
        init: function(t, e) {
            return new i(t, e)
        }
    };
export {
    o as
    default
};